//TODO: COMMENT

//path to original source folder (e.g.: src/)
path.original.source= /home/stein/Proyects/NewMuJava/MuJava/test/

//path to original bin folder (e.g.: bin/)
path.original.bin= /home/stein/Proyects/NewMuJava/MuJava/test/

//path to tests bin folder
path.tests.bin= /home/stein/Proyects/NewMuJava/MuJava/test/

//where to save mutants
path.mutants= /home/stein/Desktop/BORRAME/mutants/

//class to mutate (full qualified name)
mutation.basic.class= arithmetic.Smallest

//methods to mutate (separated by spaces)
mutation.basic.methods= smallest

//operators to use (separated by spaces)
mutation.basic.operators= AODS AODU AOIS AOIU AORB AORS AORU ASRS COD COI COR LOD LOI LOR ROR SOR PRVOL_SMART PRVOR_REFINED PRVOU_REFINED AMC IHI EMM EOA_STRICT EOC IHD IPC ISI_SMART ISD_SMART EAM IOD IOP JDC JID JSD JSI JTD JTI_SMART OAN_RELAXED PNC OMR PPD

//if mutation score will be calculated
mutation.basic.mutationScore= true

//test classes to run (fully qualified names separated by spaces)
mutation.basic.tests= arithmetic.SmallestTests

mutation.basic.showSurvivingMutants= true

//methods that will not be used by PRVO (separated by spaces)
mutation.advanced.bannedMethods=

//fields that will not be used by PRVO (separated by spaces)
mutation.advanced.bannedFields=

//if mutGenLimit annotations will be ignored
mutation.advanced.ignoreMutGenLimit= true

//if field mutations are allowed
mutation.advanced.allowFieldMutations= false

//if class mutations are allowed
mutation.advanced.allowClassMutations= false

//packages that will be marked to reload (separared by spaces, empty if all are allowed)
mutation.advanced.allowedPackagesToReload= arithmetic

//stop at the first failing test for each mutant
mutation.advanced.quickDeath= true

//enable full verbose information
mutation.advanced.fullVerbose= false

mutation.advanced.generations= 2

//this forces to clean unused Reloaders every N instances
mutation.advanced.ReloaderCleanLimit= 120

mutation.basic.showSurvivingMutants= true


//CONFIGURATION VALUES FOR PRVO OPERATOS


//Enable/disable mutations that changes one element of an expression without affecting it's length
mutation.advanced.prvo.enableSameLenght= true

//Enable/disable mutations that changes an expression by adding a new element
mutation.advanced.prvo.enableIncreaseLenght= true

//Enable/disable mutations that removes an element from an expression
mutation.advanced.prvo.enableDecreaseLenght= true

//Enable/disable mutations that changes one field or method in a chained expression with a chained expression of size 2
mutation.advanced.prvo.enableOneByTwo= true

//Enable/disable mutations that changes a sub chained expression of size 2 with one field or method
mutation.advanced.prvo.enableTwoByOne= true

//Enable/disable mutations affecting a chained expression on the left side of an assignment statement replacing this expression with a variable or field
mutation.advanced.prvo.enableAllByOneLeft= false

//Enable/disable mutations affecting a chained expression on the right side of an assignment statement replacing this expression with a variable, field or null
mutation.advanced.prvo.enableAllByOneRight= false

//apply refined versions of PRVO to arguments in statements containing only a method call
mutation.advanced.prvo.applyRefinedPRVOInMethodCallStatements= true

//enable mutations of the form a = b where a is of type Object and b is a primitive type expression
mutation.advanced.prvo.disablePrimitiveToObjectAssignments= false

//wrap mutations of the form a = b to a = new T(b), where a is of type Object and b is a primitive type expression
mutation.advanced.prvo.wrapPrimitiveToObjectAssignments= false

//allows PRVO to use numeric literal variations
mutation.advanced.prvo.allowNumericLiteralVariations= true

//Enable/disable the use of super in the generated mutations
mutation.advanced.prvo.enableSuper= true

//Enable/disable the use of this in the generated mutations
mutation.advanced.prvo.enableThis= true

//Enable/disable the use of literals to replace expressions of size one
mutation.advanced.prvo.enableReplacementWithLiterals= true

//Enable/disable the use of the literal null in the generated mutations
mutation.advanced.prvo.enableNullLiteral= true

//Enable/disable the use of the literal true in the generated mutations
mutation.advanced.prvo.enableTrueLiteral= true

//Enable/disable the use of the literal false in the generated mutations
mutation.advanced.prvo.enableFalseLiteral= true

//Enable/disable the use of the empty string literal in the generated mutations
mutation.advanced.prvo.enableEmptyString= true

//Enable/disable the use of the literal 0 in the generated mutations
mutation.advanced.prvo.enableZeroLiteral= true

//Enable/disable the use of the literal 1 in the generated mutations
mutation.advanced.prvo.enableOneLiteral= true

//Enable/disable the use of the string literals (collected from the method to mutate code) in the generated mutations
mutation.advanced.prvo.enableStringLiterals= true


//CONFIGURATION VALUES FOR ROR OPERATOR


//Enable/disable the replacement of boolean expressions with true
mutation.advanced.ror.replaceWithTrue= true

//Enable/disable the replacement of boolean expressions with false
mutation.advanced.ror.replaceWithFalse= true


//CONFIGURATION VALUES FOR COR OPERATOR


//Enable/disable replacements with and operator
mutation.advanced.cor.andOperator= true

//Enable/disable replacements with or operator
mutation.advanced.cor.orOperator= true

//Enable/disable replacements with xor operator
mutation.advanced.cor.xorOperator= true

//Enable/disable replacements with bit and operator
mutation.advanced.cor.bitAndOperator= true

//Enable/disable replacements with bit or operator
mutation.advanced.cor.bitOrOperator= true