package MYS.op;

import java.io.*;
import java.util.Enumeration;
import openjava.ptree.*;
import openjava.mop.Environment;
import MYS.op.util.MutantCodeWriter;

public class IPC_Writer extends MutantCodeWriter
{

    ConstructorInvocation mutant = null;

    public void setMutant(ConstructorInvocation mutant){
      this.mutant = mutant;
    }


    public IPC_Writer( String file_name, PrintWriter out ) {
	super(file_name,out);
    }

     public void visit( ConstructorInvocation p )
	throws ParseTreeException
    {
      if(p.eq(mutant)){
	mutated_line = line_num;
	writeTab();
	out.println("// " + p.toString());
	line_num++;
	writeLog(removeNewline(p.toString()+" is deleted"));
      }
      else{
        writeTab();
        if (p.isSelfInvocation()) {
            out.print( "this" );
        } else {
            Expression enclosing = p.getEnclosing();
            if (enclosing != null) {
                enclosing.accept( this );
                out.print( " . " );
            }
            out.print( "super" );
        }

        ExpressionList exprs = p.getArguments();
	writeArguments( exprs );

	out.print( ";" );

        out.println(); line_num++;
      }
    }
}
