package jmutation.op.basic;

import jmutation.op.util.CallAnalyzer;
import openjava.mop.*;
import openjava.ptree.*;
import java.io.*;

public class AOR extends CallAnalyzer{

  public AOR(FileEnvironment file_env,ClassDeclaration cdecl,CompilationUnit comp_unit){
    super( file_env, comp_unit );
  }

  public void visit( BinaryExpression p ) throws ParseTreeException {
    OJClass type = getType(p);
    // arithmetic expression
    if( type==OJSystem.INT || type==OJSystem.DOUBLE || type==OJSystem.FLOAT
       || type==OJSystem.LONG || type==OJSystem.SHORT){
        //if(absFlag) absMutantGen(p);
    }

    Expression lexpr = p.getLeft();

    Expression rexpr = p.getRight();

    int op_type = p.getOperator();
    switch(op_type){
      // for AOR mutation operator
      // 5 Arithmetic Operators : TIMES, DIVIDE, MOD, PLUS, MINUS
      case BinaryExpression.TIMES :
                 // if(aorFlag) aorMutantGen(p,BinaryExpression.TIMES);
                  break;

      case BinaryExpression.DIVIDE :
                  //if(aorFlag) aorMutantGen(p,BinaryExpression.DIVIDE);
                  break;

      case BinaryExpression.MOD :
                 // if(aorFlag) aorMutantGen(p,BinaryExpression.MOD);
                  break;

      case BinaryExpression.PLUS :
                 // if(aorFlag) aorMutantGen(p,BinaryExpression.PLUS);
                  break;

      case BinaryExpression.MINUS :
                //  if(aorFlag) aorMutantGen(p,BinaryExpression.MINUS);
                  break;
    }
  }
    private void aorMutantGen(BinaryExpression exp,int op){
      if(op!=BinaryExpression.TIMES){
        aor_outputToFile(exp,BinaryExpression.TIMES);
      }
      if(op!=BinaryExpression.DIVIDE){
        aor_outputToFile(exp,BinaryExpression.DIVIDE);
      }
      if(op!=BinaryExpression.MOD){
        aor_outputToFile(exp,BinaryExpression.MOD);
      }
      if(op!=BinaryExpression.PLUS){
        aor_outputToFile(exp,BinaryExpression.PLUS);
      }
      if(op!=BinaryExpression.MINUS){
        aor_outputToFile(exp,BinaryExpression.MINUS);
      }
    }
   public void aor_outputToFile(BinaryExpression original,int mutant_op){
      if (comp_unit==null) return;

      String f_name;
      num++;
      f_name = getSourceName("AOR");
      String mutant_dir = getMuantID("AOR");

      try {
		 PrintWriter out = getPrintWriter(f_name);
		 AOR_Writer writer = new AOR_Writer(mutant_dir,out);
		 writer.setMutant(original,mutant_op);
		 comp_unit.accept( writer );
		 out.flush();  out.close();
      } catch ( IOException e ) {
		  System.err.println( "fails to create " + f_name );
      } catch ( ParseTreeException e ) {
		 System.err.println( "errors during printing " + f_name );
		 e.printStackTrace();
      }
   }
}