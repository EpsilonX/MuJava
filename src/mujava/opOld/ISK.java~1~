package MYS.op;

import java.io.*;
import openjava.mop.*;
import openjava.ptree.*;
import MYS.op.util.CallAnalyzer;

public class ISK extends CallAnalyzer
{
	 MethodDeclaration current_method;



    public ISK(FileEnvironment file_env,ClassDeclaration cdecl,
      CompilationUnit comp_unit)
    {
	  super( file_env, comp_unit );
    }

    public void visit( MethodDeclaration p ) throws ParseTreeException {
		current_method = p;
		super.visit(p);
    }


    public void visit( FieldAccess p ) throws ParseTreeException {
      Expression ref_exp = p.getReferenceExpr();
      if(ref_exp instanceof SelfAccess){
			if(((SelfAccess)ref_exp).getAccessType()==SelfAccess.SUPER){
			  FieldAccess mutant = (FieldAccess)p.makeRecursiveCopy();
			  mutant.setReferenceExpr(null);
			  outputToFile(p,mutant);
			}
      }
    }
    public void visit( AssignmentExpression p ) throws ParseTreeException {
  		Expression newp = this.evaluateDown( p );
		 if (newp != p) {
			  p.replace( newp );
			  return;
		 }
		 p.childrenAccept( this );
		 newp = this.evaluateUp( p );
		 if (newp != p)  p.replace( newp );
    }

  public void visit( MethodCall p ) throws ParseTreeException {
	  Expression lexp = p.getReferenceExpr();
	  if(lexp!=null){
		 if(lexp instanceof SelfAccess){
			if( (((SelfAccess)lexp).getAccessType()==SelfAccess.SUPER)
				&& !(occurRecursive(p)))
		  {
			  MethodCall mutant;
			  mutant = (MethodCall)p.makeRecursiveCopy();
			  mutant.setReferenceExpr(null);
			  outputToFile(p,mutant);
			}
		 }else if(lexp instanceof FieldAccess){
			super.visit(p);
		 }
	  }
  }


   public void outputToFile(FieldAccess original,FieldAccess mutant){
      if (comp_unit==null) return;

      String f_name;
      num++;
      f_name = getSourceName(this);
		String mutant_dir = getMuantID();

      try {
		 PrintWriter out = getPrintWriter(f_name);
		 ISK_JTD_Writer writer = new ISK_JTD_Writer(mutant_dir,out);
		 writer.setMutant(original,mutant);
		 comp_unit.accept( writer );
		 out.flush();  out.close();
      } catch ( IOException e ) {
		  System.err.println( "fails to create " + f_name );
      } catch ( ParseTreeException e ) {
		 System.err.println( "errors during printing " + f_name );
		 e.printStackTrace();
      }
   }


   public void outputToFile(MethodCall original,MethodCall mutant){
      if (comp_unit==null) return;

      String f_name;
      num++;
      f_name = getSourceName(this);
		String mutant_dir = getMuantID();

      try {
		 PrintWriter out = getPrintWriter(f_name);
		 ISK_JTD_Writer writer = new ISK_JTD_Writer(mutant_dir,out);
		 writer.setMutant(original,mutant);
		 comp_unit.accept( writer );
		 out.flush();  out.close();
      } catch ( IOException e ) {
		  System.err.println( "fails to create " + f_name );
      } catch ( ParseTreeException e ) {
		 System.err.println( "errors during printing " + f_name );
		 e.printStackTrace();
      }
   }

  private boolean occurRecursive(MethodCall p){
    // compare method name
    if( !(p.getName()).equals(current_method.getName()) ) return false;

    ExpressionList args = p.getArguments();
    ParameterList pars = current_method.getParameters();

    // compare parameter number
    if(pars.size()!=args.size()) return false;
    if( (pars.size()==0) && (args.size()==0)) return true;

    // compare paremeter type
    if(pars.size()>0){
      try{
        String par_type;
        String arg_type;
        for(int i=0; i<pars.size(); i++){
          par_type = pars.get(i).getTypeSpecifier().getName();
          arg_type = (getType(args.get(i))).getName();
          if( !(par_type.equals(arg_type)) ) return false;
        }
      }catch(Exception e){
        return false;
      }
    }
    return true;
  }

}