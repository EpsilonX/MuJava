package jmutation.op;

import java.io.*;
import java.util.Enumeration;
import openjava.ptree.*;
import openjava.mop.Environment;
import jmutation.op.util.MutantCodeWriter;

public class JSD_Writer extends MutantCodeWriter
{

    FieldDeclaration mutant = null;
    boolean isMutantTarget = false;

    public void setMutant(FieldDeclaration f){
      mutant = f;
      isMutantTarget = false;
    }

    public JSD_Writer( String file_name,PrintWriter out ) {
		super(file_name,out);
    }

    public void visit( FieldDeclaration p )
	throws ParseTreeException
    {
      if(p.eq(mutant)){

        isMutantTarget = true;
        super.visit(p);
        isMutantTarget = false;
      }else{
        super.visit(p);
      }
    }

    public void visit( ModifierList p )
	throws ParseTreeException
    {
      if(isMutantTarget){
       // p.remove(ModifierList.STATIC);
       // super.visit(p);

       ModifierList temp = (ModifierList)p.makeCopy();
       temp.delete(ModifierList.STATIC);
       super.visit(temp);

        /*
        String original_modifier = p.toString();
        int index = original_modifier.indexOf("static");
        String str1;
        if(index>0){
			str1 = original_modifier.substring(0,index-1);
        }else{
			str1 = "";
        }
        String str2 = original_modifier.substring(index+6);
        String mutated_modifier = str1+str2;
        */

        // -------------------------------------------------------------
        mutated_line = line_num;
        //out.print(p.toString()+" -> " + temp.toString());
        writeLog(removeNewline("static is deleted"));
        // -------------------------------------------------------------
      }else{
        super.visit(p);
        //out.print( ModifierList.toString( p.getRegular() ) );
      }
    }
}