package MYS.op;

import java.io.*;
import java.util.Enumeration;
import openjava.ptree.*;
import openjava.mop.Environment;
import MYS.op.util.MutantCodeWriter;

public class PRV_Writer extends MutantCodeWriter
{

    AssignmentExpression original = null;
    String mutant = null;

    public void setMutant(AssignmentExpression original,String mutant){
      this.original = original;
      this.mutant = mutant;
    }


    public PRV_Writer( String file_name,PrintWriter out ) {
	super(file_name,out);
    }

    public void visit( AssignmentExpression p )
	throws ParseTreeException
    {
      if(p.eq(original)){
        Expression lexpr = p.getLeft();

        if (lexpr instanceof AssignmentExpression) {
			 writeParenthesis( lexpr );

        } else {
			 lexpr.accept( this );
        }

		  String operator = p.operatorString();
        out.print( " " + operator + " " );

        out.print(mutant);

		  // -------------------------------------------------------------
		  mutated_line = line_num;
		  //out.print(mutant);
		  writeLog(removeNewline(original.toString()+";  =>  "+ lexpr.toString() + " = " + mutant+";"));
		  // -------------------------------------------------------------

      }else{
        Expression lexpr = p.getLeft();

        if (lexpr instanceof AssignmentExpression) {
	    writeParenthesis( lexpr );

        } else {
	    lexpr.accept( this );
        }

		  String operator = p.operatorString();
        out.print( " " + operator + " " );

        Expression rexp = p.getRight();
        rexp.accept( this );
      }
    }
}
