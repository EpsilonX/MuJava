package MYS.op;

import java.io.*;
import openjava.ptree.*;
import MYS.op.util.MutantCodeWriter;
import MYS.op.util.AMC_Helper;

public class AMC_Writer extends MutantCodeWriter implements AMC_Helper
{
    boolean flag = false;
    int mod_mutant = 0;
    MethodDeclaration method_mutant = null;
    FieldDeclaration field_mutant = null;
    ModifierList base = null;


    public void setMutant(MethodDeclaration mutant,ModifierList mlist,int mod){
      method_mutant = mutant;
      base = (ModifierList)mlist.makeCopy();
      mod_mutant = mod;
    }

    public void setMutant(FieldDeclaration mutant,ModifierList mlist,int mod){
      field_mutant = mutant;
      base = (ModifierList)mlist.makeCopy();
      mod_mutant = mod;
    }

    public AMC_Writer( String file_name, PrintWriter out ) {
	super(file_name,out);
    }

    public void visit( ModifierList p )	throws ParseTreeException
    {
      if(!flag){
	super.visit(p);
      }else{
	if(mod_mutant==PUBLIC){
	  base.add(ModifierList.PUBLIC);
	}else if(mod_mutant==PRIVATE){
	  base.add(ModifierList.PRIVATE);
	}else if(mod_mutant==PROTECTED){
	  base.add(ModifierList.PROTECTED);
	}
	super.visit(base);
      }
    }


    public void visit( FieldDeclaration p )
	throws ParseTreeException
    {
      if(!p.eq(field_mutant)){
	super.visit(p);
      }else{

        printComment(p);
        writeTab();

	//---------------------------------------------
	  mutated_line = line_num;
	  writeLog("access modifier change"+mod_mutant);
	//--------------------------------------------

        /*ModifierList Change*/
        if (base!=null) {
	    flag = true;
            base.accept( this );
            if (! base.isEmptyAsRegular())  out.print( " " );
	    flag = false;
        }

        /*TypeName*/
        TypeName ts = p.getTypeSpecifier();
        ts.accept(this);

        out.print(" ");

        /*Variable*/
        String variable = p.getVariable();
        out.print(variable);

        /*"=" VariableInitializer*/
        VariableInitializer initializer = p.getInitializer();
        if (initializer != null) {
            out.print(" = ");
            initializer.accept(this);
        }
        /*";"*/
        out.print(";");

        out.println();
	line_num++;
      }
    }

    public void visit( MethodDeclaration p )
	throws ParseTreeException
    {
      if(!p.eq(method_mutant)){
	super.visit(p);
      }else{
        printComment( p );

	//---------------------------------------------
	  mutated_line = line_num;
	  writeLog("access modifier change"+mod_mutant);
	//--------------------------------------------

        writeTab();
        /*ModifierList Change*/
        if (base!=null) {
	    flag = true;
            base.accept( this );
            if (! base.isEmptyAsRegular())  out.print( " " );
	    flag = false;
        }


        TypeName ts = p.getReturnType();
        ts.accept( this );

        out.print( " " );

        String name = p.getName();
        out.print( name );

        ParameterList params = p.getParameters();
        out.print( "(" );
        if (! params.isEmpty()) {
	    out.print( " " );  params.accept( this );  out.print( " " );
        } else {
	    params.accept( this );
        }
        out.print( ")" );

        TypeName[] tnl = p.getThrows();
        if (tnl.length != 0) {
	    out.println(); line_num++;
	    writeTab();  writeTab();
            out.print( "throws " );
            tnl[0].accept( this );
            for (int i = 1; i < tnl.length; ++i) {
                out.print ( ", " );
                tnl[i].accept( this );
            }
        }

        StatementList bl = p.getBody();
        if (bl == null) {
	    out.print( ";" );
        } else {
	    out.println(); line_num++; writeTab();
	    out.print( "{" );
	    if (bl.isEmpty()) {
		bl.accept( this );
	    } else {
		out.println(); line_num++;
		pushNest();  bl.accept( this );  popNest();
		writeTab();
	    }
	    out.print( "}" );
        }
        out.println(); line_num++;
      }
    }
}
