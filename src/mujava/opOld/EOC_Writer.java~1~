package MYS.op;

import java.io.*;
import java.util.Enumeration;
import openjava.ptree.*;
import openjava.mop.Environment;
import MYS.op.util.MutantCodeWriter;

public class EOC_Writer extends MutantCodeWriter
{

    BinaryExpression original = null;
    String mutant = null;

    public void setMutant(BinaryExpression original,String mutant){
      this.mutant = mutant;
      this.original = original;
    }

   public EOC_Writer( String file_name, PrintWriter out ) {
	super(file_name,out);
    }

    public void visit( BinaryExpression p ) throws ParseTreeException
    {
      if(p.eq(original)){
	// -------------------------------------------------------------
	mutated_line = line_num;
	out.print(mutant);
	writeLog(removeNewline(original.toString()+" => "+mutant));
	// -------------------------------------------------------------
      }else{
        Expression lexpr = p.getLeft();
        if (isOperatorNeededLeftPar( p.getOperator(), lexpr )) {
	    writeParenthesis( lexpr );
        } else {
            lexpr.accept( this );
        }

	String operator = p.operatorString();
        out.print( " " + operator + " " );

        Expression rexpr = p.getRight();
        if (isOperatorNeededRightPar( p.getOperator(), rexpr )) {
	    writeParenthesis( rexpr );
        } else {
            rexpr.accept( this );
        }
      }
    }

}
