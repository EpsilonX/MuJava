package MYS.op;

import java.io.*;
import java.util.Enumeration;
import openjava.ptree.*;
import openjava.mop.Environment;
import MYS.op.util.MutantCodeWriter;

public class PPD_Writer extends MutantCodeWriter
{

    Parameter original = null;
    Parameter mutant = null;

    public void setMutant(Parameter original,Parameter mutant){
      this.original = original;
      this.mutant = mutant;
    }


    public PPD_Writer( String file_name, PrintWriter out ) {
	super(file_name,out);
    }

    public void visit( Parameter p ) throws ParseTreeException
    {
      if(p.eq(original)){
	// -------------------------------------------------------------
	mutated_line = line_num;
	visit(mutant);
	writeLog(removeNewline(original.toString()+" => "+mutant.toString()));
	// -------------------------------------------------------------
      }else{
        ModifierList modifs = p.getModifiers();
        modifs.accept( this );
        if (! modifs.isEmptyAsRegular())  out.print( " " );

        TypeName typespec = p.getTypeSpecifier();
        typespec.accept( this );

        out.print( " " );

        String declname = p.getVariable();
        out.print( declname );
      }
    }
}

