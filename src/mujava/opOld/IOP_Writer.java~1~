package MYS.op;

import java.io.*;
import openjava.ptree.*;
import MYS.op.util.IOP_Helper;
import MYS.op.util.MutantCodeWriter;

public class IOP_Writer extends MutantCodeWriter implements IOP_Helper
{

    int index,mod;
    boolean flag = false;
    MethodDeclaration mutant = null;

    public void setMutant(MethodDeclaration mutant,int a,int b){
      this.mutant = mutant;
      this.index = a;
      this.mod = b;
    }

    public IOP_Writer( String file_name, PrintWriter out ) {
	super(file_name,out);
    }


    public void visit( StatementList p )
	throws ParseTreeException
    {
      int i;

      if(!flag){
	super.visit(p);
      }else{
	switch(mod){
	  case FIRST: mutated_line = line_num;
		      writeLog("Overridden method call at first line.");
		      visit(p.get(index));
		      for(i=0; i<p.size(); i++){
			if(i!=index) visit(p.get(i));
		      }
		      break;

	  case LAST:  mutated_line = line_num + p.size()-1;
		      writeLog("Overridden method call at last line.");
		      for(i=0; i<p.size(); i++){
			if(i!=index) visit(p.get(i));
		      }
		      visit(p.get(index));
		      break;

	  case UP:    mutated_line = line_num + index-1;
		      writeLog("Overridden method call at one line up.");
		      for(i=0; i<p.size(); i++){
			if(i==(index-1)) visit(p.get(index));
			else if(i==index) visit(p.get(index-1));
			else visit(p.get(i));
		      }
		      break;

	  case DOWN:  mutated_line = line_num + index+1;
		      writeLog("Overridden method call at one line down.");
		      for(i=0; i<p.size(); i++){
			if(i==(index)) visit(p.get(index+1));
			else if(i==index+1) visit(p.get(index));
			else visit(p.get(i));
		      }
		      break;
	}
      }
    }

    public void visit( MethodDeclaration p )
	throws ParseTreeException
    {
      if(p.eq(mutant)){
	flag = true;
      }
      super.visit(p);
      flag = false;
    }
}