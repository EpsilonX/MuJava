package jmutation.op;

import java.io.*;
import java.util.Vector;
import openjava.mop.*;
import openjava.ptree.*;
import jmutation.op.util.CallAnalyzer;

public class JSC extends CallAnalyzer
{

  Vector staticFields;
  boolean isField;

  public JSC(FileEnvironment file_env,ClassDeclaration cdecl,
    CompilationUnit comp_unit)
  {
	super( file_env,comp_unit );
    staticFields = new Vector();
    isField = false;
  }

  public void visit( FieldDeclaration p ) throws ParseTreeException {
    if(p.getModifiers().contains(ModifierList.STATIC)){
      staticFields.add(p);
    }
  }

  public void visit( Variable p ) throws ParseTreeException {
    for(int i=0;i<staticFields.size();i++){
      FieldDeclaration fd = (FieldDeclaration)(staticFields.get(i));
      String name = fd.getName();
      if(name.equals(p.toString())){
        outputToFile(fd);
        staticFields.remove(fd);
        return;
      }
    }
    super.visit(p);
  }




   public void outputToFile(FieldDeclaration original){
      if (comp_unit==null) return;

      String f_name;
      num++;
      f_name = getSourceName(this);
		String mutant_dir = getMuantID();

      try {
			PrintWriter out = getPrintWriter(f_name);
			JSC_Writer writer = new JSC_Writer( mutant_dir,out );
			writer.setMutant(original);
			comp_unit.accept( writer );
			out.flush();  out.close();
      } catch ( IOException e ) {
	System.err.println( "fails to create " + f_name );
      } catch ( ParseTreeException e ) {
	System.err.println( "errors during printing " + f_name );
	e.printStackTrace();
      }
   }
}