////////////////////////////////////////////////////////////////////////////
// Module : MutantsGenPanel.java
// Author : Ma, Yu-Seung
// COPYRIGHT 2005 by Yu-Seung Ma, ALL RIGHTS RESERVED.
////////////////////////////////////////////////////////////////////////////

package mujava.gui;

import java.util.*;
import java.io.*;
import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import javax.swing.table.*;
import javax.swing.border.*;
import mujava.*;
import mujava.util.MutantDirFilter;
import mujava.util.Debug;


/**
 * <p>Description: </p>
 * <p>Copyright: Copyright (c) 2005 by Yu-Seung Ma, ALL RIGHTS RESERVED </p>
 * @author Yu-Seung Ma
 * @version 1.0
  */

public class MutantsGenPanel extends JPanel {

  GenMutantsMain parent_frame;

  JButton runB = new JButton("Generate");

  JTable fileTable = new JTable();
  JButton fileNoneB = new JButton("None");
  JButton fileAllB = new JButton("All");

  JTable traditionalOpTable = new JTable();
  JButton traditionalNoneB = new JButton("None");
  JButton traditionalAllB = new JButton("All");

  JTable classOpTable = new JTable();
  JButton classNoneB = new JButton("None");
  JButton classAllB = new JButton("All");



  public MutantsGenPanel(GenMutantsMain parent_frame){
    try {
      this.parent_frame = parent_frame;
      jbInit();
    }
    catch(Exception ex) {
      ex.printStackTrace();
    }
  }

  void jbInit(){
    this.setLayout(new BoxLayout(this,BoxLayout.LINE_AXIS));
    JPanel leftPanel = new JPanel();
    JPanel rightPanel = new JPanel();

    // LEFT part
    leftPanel.setLayout(new BoxLayout(leftPanel,BoxLayout.PAGE_AXIS));

    JPanel usagePanel = new JPanel();
    usagePanel.setLayout(new FlowLayout(FlowLayout.LEADING));

    JPanel tempP = new JPanel();
    JLabel temp  = new JLabel("   Usage : " );
    temp.setForeground(Color.gray);
    tempP.add(temp);
    tempP.setPreferredSize(new Dimension(70,70));
    tempP.setBorder(new EtchedBorder());

    JPanel usgeContentP = new JPanel();
    usgeContentP.setLayout(new BoxLayout(usgeContentP,BoxLayout.PAGE_AXIS));
    usgeContentP.add(new JLabel(" [1] Select files to test"));
    usgeContentP.add(new JLabel(" [2] Select mutation operators to apply"));
    usgeContentP.add(new JLabel(" [3] Push \"RUN\" button"));
    usgeContentP.add(new JLabel(" [4] Wait with endurance. ^^;"));
    usagePanel.add(tempP);
    usagePanel.add(usgeContentP);
    usagePanel.setBorder(new EtchedBorder());
    leftPanel.add(usagePanel);

    leftPanel.add(Box.createRigidArea(new Dimension(0,10)));


    JPanel filePanel = new JPanel();
    filePanel.setLayout(new BorderLayout());
    JScrollPane fileSP = new JScrollPane();
    FileTableModel fTableModel = new FileTableModel(MutationSystem.getNewTragetFiles());
    fileTable = new JTable(fTableModel);
    initFileColumnSizes(fileTable,fTableModel);
    fileSP.getViewport().add(fileTable, null);
    fileSP.setPreferredSize(new Dimension(500,500));
    leftPanel.add(fileSP);

    leftPanel.add(Box.createRigidArea(new Dimension(10,10)));

    JPanel fileBP = new JPanel();
    fileBP.setLayout(new BoxLayout(fileBP,BoxLayout.LINE_AXIS));
    fileBP.add(Box.createRigidArea(new Dimension(10,10)));
    fileBP.add(fileNoneB);
    fileNoneB.addMouseListener(new java.awt.event.MouseAdapter()
    {
      public void mouseClicked(MouseEvent e)
      {
        fileNoneB_mouseClicked(e);
      }
    });
    fileBP.add(Box.createRigidArea(new Dimension(10,10)));
    fileBP.add(fileAllB);
    fileAllB.addMouseListener(new java.awt.event.MouseAdapter()
    {
      public void mouseClicked(MouseEvent e)
      {
        fileAllB_mouseClicked(e);
      }
    });
    fileBP.add(Box.createHorizontalGlue());
    runB.setBackground(Color.YELLOW);
    fileBP.add(runB);
    runB.addMouseListener(new java.awt.event.MouseAdapter()
    {
      public void mouseClicked(MouseEvent e)
      {
        runB_mouseClicked(e);
      }
    });
    leftPanel.add(fileBP);
    fileBP.add(Box.createRigidArea(new Dimension(10,10)));
    leftPanel.add(Box.createRigidArea(new Dimension(20,20)));


    // RIGHT part
    rightPanel.setPreferredSize(new Dimension(150,600));
    rightPanel.setLayout(new BoxLayout(rightPanel,BoxLayout.PAGE_AXIS));
    rightPanel.setBorder(new EtchedBorder());


    JTextField titleOP= new JTextField("     Mutation Operator");
    titleOP.setBackground(Color.black);
    titleOP.setEnabled(false);
    rightPanel.add(titleOP);


    JPanel traditional_operator_panel = new JPanel();
    traditional_operator_panel.setBorder(new TitledBorder("Traditional Operator"));
    traditional_operator_panel.setLayout(new BoxLayout(traditional_operator_panel,BoxLayout.PAGE_AXIS));
    JScrollPane traditional_operator_scrollP = new JScrollPane();
    traditional_operator_panel.add(traditional_operator_scrollP);
    TMOTableModel tmTableModel = new TMOTableModel();
    traditionalOpTable = new JTable(tmTableModel);
    initColumnSizes(traditionalOpTable,tmTableModel);
    traditional_operator_scrollP.getViewport().add(traditionalOpTable, null);
    traditional_operator_scrollP.setPreferredSize(new Dimension(115,102));
    traditional_operator_scrollP.setMaximumSize(new Dimension(115,102));
    traditional_operator_panel.add(traditional_operator_scrollP);
    JPanel traditionalBPanel = new JPanel();
    traditionalBPanel.setLayout(new FlowLayout());
    traditionalBPanel.add(traditionalNoneB);
    traditionalNoneB.addMouseListener(new java.awt.event.MouseAdapter()
    {
      public void mouseClicked(MouseEvent e)
      {
        traditionalNoneB_mouseClicked(e);
      }
    });
    traditionalBPanel.add(traditionalAllB);
    traditionalAllB.addMouseListener(new java.awt.event.MouseAdapter()
    {
      public void mouseClicked(MouseEvent e)
      {
        traditionalAllB_mouseClicked(e);
      }
    });
    traditional_operator_panel.add(traditionalBPanel);

    JPanel temp_traditional_panel = new JPanel();
    temp_traditional_panel.setBorder(new TitledBorder("Traditional Operator"));
    JLabel temp_label = new JLabel("Under Construction... ",JLabel.CENTER);
    temp_traditional_panel.add(temp_label);



    JPanel class_operator_panel = new JPanel();
    class_operator_panel.setBorder(new TitledBorder("Class Operator"));
    class_operator_panel.setLayout(new BoxLayout(class_operator_panel,BoxLayout.PAGE_AXIS));
    JScrollPane class_operator_scrollP = new JScrollPane();
    class_operator_panel.add(class_operator_scrollP);
    CMOTableModel cmTableModel = new CMOTableModel();
    classOpTable = new JTable(cmTableModel);

    initColumnSizes(classOpTable,cmTableModel);
    class_operator_scrollP.getViewport().add(classOpTable, null);
    class_operator_scrollP.setPreferredSize(new Dimension(115,470));
    class_operator_scrollP.setMaximumSize(new Dimension(115,470));

    class_operator_panel.add(class_operator_scrollP);
    JPanel classBPanel = new JPanel();
    classBPanel.setLayout(new FlowLayout());
    classBPanel.add(classNoneB);
    classNoneB.addMouseListener(new java.awt.event.MouseAdapter()
    {
      public void mouseClicked(MouseEvent e)
      {
        classNoneB_mouseClicked(e);
      }
    });
    classBPanel.add(classAllB);
    classAllB.addMouseListener(new java.awt.event.MouseAdapter()
    {
      public void mouseClicked(MouseEvent e)
      {
        classAllB_mouseClicked(e);
      }
    });
    class_operator_panel.add(classBPanel);

    rightPanel.add(Box.createRigidArea(new Dimension(0,5)));
    // Traditional operators ar not supported they are newly designed.
    rightPanel.add(traditional_operator_panel);
    //rightPanel.add(temp_traditional_panel);
    rightPanel.add(class_operator_panel);

    this.add(leftPanel);
    this.add(Box.createRigidArea(new Dimension(10,10)));
    this.add(rightPanel);

  }

  protected void initColumnSizes(JTable table, AbstractTableModel model) {
    TableColumn column = null;

    for (int i = 0; i < table.getColumnCount(); i++) {
      column = table.getColumnModel().getColumn(i);
      switch(i){
        case 0 :  column.setMaxWidth(30);
                  break;
        case 1 :  column.setMaxWidth(90);
                  break;
        case 2 :  column.setMaxWidth(80);
                  break;
      }
    }
  }

  void fileAllB_mouseClicked(MouseEvent e){
    FileTableModel table = (FileTableModel)fileTable.getModel();
    table.setAllSelectValue(true);
    fileTable.setModel(table);
    fileTable.repaint();
  }

  void fileNoneB_mouseClicked(MouseEvent e){
    FileTableModel table = (FileTableModel)fileTable.getModel();
    table.setAllSelectValue(false);
    fileTable.setModel(table);
    fileTable.repaint();
  }

  void runB_mouseClicked(MouseEvent e){
    FileTableModel fTableModel = (FileTableModel)fileTable.getModel();
    String[] file_list = fTableModel.getSelectedFiles();
    if(file_list==null || file_list.length==0){
      System.err.println("[ERROR] No class is selected.");
      return;
    }

    boolean canStart = false;

    CMOTableModel cmoTableModel = (CMOTableModel)classOpTable.getModel();
    String[] class_ops = cmoTableModel.getSelectedOprators();
    if(class_ops!=null && class_ops.length>0){
      canStart = true;
    }

    TMOTableModel tmoTableModel = (TMOTableModel)traditionalOpTable.getModel();
    String[] traditional_ops = tmoTableModel.getSelectedOprators();
    if(traditional_ops!=null && traditional_ops.length>0){
      canStart = true;
    }

    if(!canStart){
      System.out.println("[Error] no operators is selected. ");
      return;
    }

    runB.setEnabled(false);

    for(int i=0;i<file_list.length;i++){
			//for(int i=150;i<200;i++){
        // file_name = ABSTRACT_PATH - MutationSystem.SRC_PATH
        // For example: org/apache/bcel/Class.java
      String file_name = file_list[i];
      try{

        System.out.println(i+" : " +file_name);
        // [1] Examine if the target class is interface or abstract class
        //     In that case, we can't apply mutation testing.
        String temp = file_name.substring(0,file_name.length()-".java".length());
        String class_name="";
        for(int ii=0;ii<temp.length();ii++){
          if( (temp.charAt(ii)=='\\') || (temp.charAt(ii)=='/') ){
            class_name = class_name + ".";
          }else{
            class_name = class_name + temp.charAt(ii);
          }
        }

        Class c = Class.forName(class_name);

				int class_type = MutationSystem.getClassType(class_name);
				if(class_type==MutationSystem.NORMAL){
					if(class_type==MutationSystem.MAIN_ONLY){
						System.out.println(" -- Can't apply because " + file_name+ " contains only 'static void main()' method.");
						continue;
					}else if(class_type==MutationSystem.MAIN){
						System.out.println(" -- "  + file_name+ " class contains 'static void main()' method.");
						System.out.println("    Pleas note that mutants are not generated for the 'static void main()' method");
					}
				}else{
					 switch(class_type){
					    case MutationSystem.INTERFACE :
							        System.out.println(" -- Can't apply because " + file_name+ " is 'interface' ");
                      break;
					    case MutationSystem.ABSTRACT :
							        System.out.println(" -- Can't apply because " + file_name+ " is 'abstract' class ");
										  break;
					    case MutationSystem.APPLET :
											System.out.println(" -- Can't apply because " + file_name+ " is 'applet' class ");
											break;
					 }
					 deleteDirectory();
					 continue;
				}


        // [2] Apply mutation testing
        setMutationSystemPathFor(file_name);

        //File[] original_files = new File[1];
        //original_files[0] = new File(MutationSystem.SRC_PATH,file_name);
        File original_file = new File(MutationSystem.SRC_PATH,file_name);

        AllMutantsGenerator genEngine;
        Debug.setDebugLevel(3);
        genEngine = new AllMutantsGenerator(original_file,class_ops,traditional_ops);
        genEngine.makeMutants();
        genEngine.compileMutants();
      }catch(OpenJavaException oje){
        System.out.println("[OJException] " + file_name + " " + oje.toString());
        //System.out.println("Can't generate mutants for " +file_name + " because OpenJava " + oje.getMessage());
        deleteDirectory();
      }catch(Exception exp){
        System.out.println("[Exception] " + file_name + " " + exp.toString());
        //System.out.println("Can't generate mutants for " +file_name + " due to exception" + exp.getClass().getName());
        //exp.printStackTrace();
        deleteDirectory();
      }catch(Error er){
        System.out.println("[Error] " + file_name + " " + er.toString());
        //System.out.println("Can't generate mutants for " +file_name + " due to error" + er.getClass().getName());
        deleteDirectory();
      }
    }
		runB.setEnabled(true);
    parent_frame.cvPanel.refreshEnv();
    parent_frame.tvPanel.refreshEnv();
    System.out.println("------------------------------------------------------------------");
    System.out.println(" All files are handled");
  }

  void deleteDirectory(){
    File originalDir = new File(MutationSystem.MUTANT_HOME+"/"+MutationSystem.DIR_NAME
                                + "/" + MutationSystem.ORIGINAL_DIR_NAME);
    while(originalDir.delete()){
    }

    File cmDir = new File(MutationSystem.MUTANT_HOME+"/"+MutationSystem.DIR_NAME
                                + "/" + MutationSystem.CM_DIR_NAME);
    while(cmDir.delete()){}

    File tmDir = new File(MutationSystem.MUTANT_HOME+"/"+MutationSystem.DIR_NAME
                                + "/" + MutationSystem.TM_DIR_NAME);
    while(tmDir.delete()){}

    File myHomeDir = new File(MutationSystem.MUTANT_HOME+"/"+MutationSystem.DIR_NAME);
    while(myHomeDir.delete()){}
  }


  void setMutationSystemPathFor(String file_name){
    try{
      String temp;
      temp = file_name.substring(0,file_name.length()-".java".length());
      temp = temp.replace('/','.');
      temp = temp.replace('\\','.');
      int separator_index = temp.lastIndexOf(".");
      if(separator_index>=0){
        MutationSystem.CLASS_NAME=temp.substring(separator_index+1,temp.length());
      }else{
        MutationSystem.CLASS_NAME = temp;
      }

      String mutant_dir_path = MutationSystem.MUTANT_HOME+"/"+temp;
      File mutant_path = new File(mutant_dir_path);
      mutant_path.mkdir();

      String class_mutant_dir_path = mutant_dir_path + "/" + MutationSystem.CM_DIR_NAME;
      File class_mutant_path = new File(class_mutant_dir_path);
      class_mutant_path.mkdir();

      String traditional_mutant_dir_path = mutant_dir_path + "/" + MutationSystem.TM_DIR_NAME;
      File traditional_mutant_path = new File(traditional_mutant_dir_path);
      traditional_mutant_path.mkdir();

      String original_dir_path = mutant_dir_path + "/" + MutationSystem.ORIGINAL_DIR_NAME;
      File original_path = new File(original_dir_path);
      original_path.mkdir();

      MutationSystem.CLASS_MUTANT_PATH = class_mutant_dir_path;
      MutationSystem.TRADITIONAL_MUTANT_PATH = traditional_mutant_dir_path;
      MutationSystem.ORIGINAL_PATH = original_dir_path;
      MutationSystem.DIR_NAME = temp;

    }catch(Exception e){
        System.err.println(e);
    }
  }


  void traditionalAllB_mouseClicked(MouseEvent e){
    TMOTableModel table = (TMOTableModel)traditionalOpTable.getModel();
    table.setAllSelectValue(true);
    traditionalOpTable.setModel(table);
    traditionalOpTable.repaint();
  }
  void traditionalNoneB_mouseClicked(MouseEvent e){
    TMOTableModel table = (TMOTableModel)traditionalOpTable.getModel();
    table.setAllSelectValue(false);
    traditionalOpTable.setModel(table);
    traditionalOpTable.repaint();
  }

  void classAllB_mouseClicked(MouseEvent e){
    CMOTableModel table = (CMOTableModel)classOpTable.getModel();
    table.setAllSelectValue(true);
    classOpTable.setModel(table);
    classOpTable.repaint();
  }
  void classNoneB_mouseClicked(MouseEvent e){
    CMOTableModel table = (CMOTableModel)classOpTable.getModel();
    table.setAllSelectValue(false);
    classOpTable.setModel(table);
    classOpTable.repaint();
  }

  protected void initFileColumnSizes(JTable table, AbstractTableModel model) {
    TableColumn column = null;

    for (int i = 0; i < table.getColumnCount(); i++) {
      column = table.getColumnModel().getColumn(i);
      switch(i){
        case 0 :  column.setMaxWidth(30);
                  break;
        case 1 :  column.setMaxWidth(700);
                  break;
        case 2 :  column.setMaxWidth(80);
                  break;
      }
    }
  }
}


class CMOTableModel extends AbstractTableModel {

  String[] columnHeader = new String[]{"","Operator"};
  String[] op;

  Object[][] data;

  public CMOTableModel(){
    op = MutationSystem.cm_operators;
    data = new Object[op.length][2];
    for(int i=0;i<op.length;i++){
      data[i][0] = new Boolean(false);
      data[i][1] = op[i];
    }
  }

  public void setAllSelectValue(boolean b){
    for(int i=0;i<data.length;i++){
      data[i][0] = new Boolean(b);
    }
  }

  public String getColumnName(int col){
    return columnHeader[col];
  }

  public int getColumnCount() {
    return columnHeader.length;
  }

  public Object getValueAt(int row, int col) {
    return data[row][col];
  }

  public int getRowCount() {
    return data.length;
  }


  public Class getColumnClass(int c) {
    return getValueAt(0, c).getClass();
  }

  public void setValueAt(Object value, int row, int col) {

    if (data[0][col] instanceof Integer && !(value instanceof Integer)) {
      try {
        data[row][col] = new Integer(value.toString());
        fireTableCellUpdated(row, col);
      } catch (NumberFormatException e) {
      }
    } else {
      data[row][col] = value;
      fireTableCellUpdated(row, col);
    }
  }

  public boolean isCellEditable(int row, int col) {
    //Note that the data/cell address is constant,
    //no matter where the cell appears onscreen.
    if (col < 1) {
      return true;
    } else {
      return false;
    }
  }

  public String[] getSelectedOprators(){
    Vector set = new Vector();
    int numRows = getRowCount();
    int i;
    for(i=0;i<numRows; i++){
      if(data[i][0].toString().equals("true")){
        set.add(data[i][1]);
      }
    }

    String[] names = new String[set.size()];
    if(set.size()>0){
      for(i=0;i<set.size();i++){
        names[i] = set.get(i).toString();
      }
      return names;
    } else {
      return null;
    }
  }
}


class TMOTableModel extends AbstractTableModel {

  String[] columnHeader = new String[]{"","Operator"};
  String[] op;
  Object[][] data;

  public TMOTableModel(){
    op = MutationSystem.tm_operators;
    data = new Object[op.length][2];
    for(int i=0;i<op.length;i++){
      //if(op[i].charAt(2)=='I'){
        //data[i][0] = new Boolean(false);
      //}else{
        data[i][0] = new Boolean(false);
      //}
      data[i][1] = op[i];
    }
  }
  public void setAllSelectValue(boolean b){
    for(int i=0;i<data.length;i++){
      data[i][0] = new Boolean(b);
    }
  }
  public String getColumnName(int col){
    return columnHeader[col];
  }

  public int getColumnCount() {
    return columnHeader.length;
  }

  public Object getValueAt(int row, int col) {
    return data[row][col];
  }

  public int getRowCount() {
    return data.length;
  }


  public Class getColumnClass(int c) {
    return getValueAt(0, c).getClass();
  }

  public void setValueAt(Object value, int row, int col) {

    if (data[0][col] instanceof Integer && !(value instanceof Integer)) {
      try {
        data[row][col] = new Integer(value.toString());
        fireTableCellUpdated(row, col);
      } catch (NumberFormatException e) {
      }
    } else {
      data[row][col] = value;
      fireTableCellUpdated(row, col);
    }
  }

  public boolean isCellEditable(int row, int col) {
    //Note that the data/cell address is constant,
    //no matter where the cell appears onscreen.
    if (col < 1) {
      return true;
    } else {
      return false;
    }
  }

  public String[] getSelectedOprators(){
    Vector set = new Vector();
    int numRows = getRowCount();
    int i;
    for(i=0;i<numRows; i++){
      if(data[i][0].toString().equals("true")){
        set.add(data[i][1]);
      }
    }

    String[] names = new String[set.size()];
    if(set.size()>0){
      for(i=0;i<set.size();i++){
        names[i] = set.get(i).toString();
      }
      return names;
    } else {
      return null;
    }
  }
}

class FileTableModel extends AbstractTableModel {

  String[] columnHeader = new String[]{"","File"};
  String[] op;

  Object[][] data;

  public FileTableModel(Vector value){
    data = new Object[value.size()][2];
    for(int i=0;i<value.size();i++){
      data[i][0] = new Boolean(false);
      data[i][1] = value.get(i);
    }
  }
  public String getColumnName(int col){
    return columnHeader[col];
  }

  public int getColumnCount() {
    return columnHeader.length;
  }
  public void setAllSelectValue(boolean b){
    for(int i=0;i<data.length;i++){
      data[i][0] = new Boolean(b);
    }
  }
  public Object getValueAt(int row, int col) {
    return data[row][col];
  }

  public int getRowCount() {
    return data.length;
  }

  public String[] getSelectedFiles(){
    Vector set = new Vector();
    int numRows = getRowCount();
    int i;
    for(i=0;i<numRows; i++){
      if(data[i][0].toString().equals("true")){
        set.add(data[i][1]);
      }
    }

    String[] names = new String[set.size()];
    if(set.size()>0){
      for(i=0;i<set.size();i++){
        names[i] = set.get(i).toString();
      }
      return names;
    } else {
      return null;
    }
  }

  public Class getColumnClass(int c) {
    return getValueAt(0, c).getClass();
  }

  public void setValue(Object[] value){
    data = new Object[value.length][2];
    for(int i=0;i<value.length;i++){
      data[i][0] = new Boolean(true);
      data[i][1] = value[i];
    }
  }


  public void setValueAt(Object value, int row, int col) {

    if (data[0][col] instanceof Integer && !(value instanceof Integer)) {
      try {
        data[row][col] = new Integer(value.toString());
        fireTableCellUpdated(row, col);
      } catch (NumberFormatException e) {
      }
    } else {
      data[row][col] = value;
      fireTableCellUpdated(row, col);
    }
  }

  public boolean isCellEditable(int row, int col) {
    //Note that the data/cell address is constant,
    //no matter where the cell appears onscreen.
    if (col < 1) {
      return true;
    } else {
      return false;
    }
  }

  public String[] getSelectedOprators(){
    Vector set = new Vector();
    int numRows = getRowCount();
    int i;
    for(i=0;i<numRows; i++){
      if(data[i][0].toString().equals("true")){
        set.add(data[i][1]);
      }
    }

    String[] names = new String[set.size()];
    if(set.size()>0){
      for(i=0;i<set.size();i++){
        names[i] = set.get(i).toString();
      }
      return names;
    } else {
      return null;
    }
  }
}


