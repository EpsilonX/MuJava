package jmutation.gui;

import java.awt.*;
import javax.swing.*;
import jmutation.MutationSystem;
import javax.swing.table.AbstractTableModel;
import java.io.File;
import jmutation.util.MutantDirFilter;

/**
 * <p>Title: </p>
 * <p>Description: </p>
 * <p>Copyright: Copyright (c) 2004</p>
 * <p>Company: </p>
 * @author unascribed
 * @version 1.0
 */

public class TraditionalMutantsViewerPanel  extends MutantsViewerPanel  {

  public TraditionalMutantsViewerPanel() {
    try {
      jbInit();
    }
    catch(Exception ex) {
      ex.printStackTrace();
    }
  }

  void setMutationType(){
    MutationSystem.MUTANT_PATH = MutationSystem.TRADITIONAL_MUTANT_PATH;
  }

  void initSummaryTable(){
    TMSummaryTableModel tmodel = new TMSummaryTableModel();
    summaryTable = new JTable(tmodel);
    adjustSummaryTableSize(summaryTable,tmodel);
  }


  void updateContents(){
    MutationSystem.ORIGINAL_PATH = MutationSystem.MUTANT_HOME
                                +"/"+target_dir+"/"+MutationSystem.ORIGINAL_DIR_NAME;

    MutationSystem.TRADITIONAL_MUTANT_PATH = MutationSystem.MUTANT_HOME
                                +"/"+target_dir+"/"+MutationSystem.TM_DIR_NAME;

    MutationSystem.MUTANT_PATH = MutationSystem.TRADITIONAL_MUTANT_PATH;

    int temp_start = target_dir.lastIndexOf(".")+1;
    if(temp_start<0) temp_start=0;
    int temp_end = target_dir.length();
    MutationSystem.CLASS_NAME = target_dir.substring(temp_start,temp_end);

    File mutant_dir = new File(MutationSystem.TRADITIONAL_MUTANT_PATH);
    String[] mutants = mutant_dir.list(new MutantDirFilter());
    showGeneratedMutantsNum(mutants);
    mList.setListData(mutants);
    mList.repaint();
    clearSourceContents();
    showOriginal();
  }

  void setSummaryTableSize(){
    summaryPanel.setPreferredSize(new Dimension(150,100));
    summaryPanel.setMaximumSize(new Dimension(150,100));
  }

  void showGeneratedMutantsNum(String[] name){
    if(name!=null){
      int[] num = new int[MutationSystem.tm_operators.length];
      for(int i=0; i<MutationSystem.tm_operators.length; i++){
        num[i] = 0;
      }
      for(int i=0;i<name.length;i++){
        for(int j=0; j<MutationSystem.tm_operators.length;j++){
         if(name[i].indexOf(MutationSystem.tm_operators[j]+"_")==0){ num[j]++;}
        }
      }

      int total = 0;
      TMSummaryTableModel myModel = (TMSummaryTableModel)(summaryTable.getModel());
      for(int i=0;i<MutationSystem.tm_operators.length;i++){
        myModel.setValueAt(new Integer(num[i]),i,1);
        total = total + num[i];
      }
      totalLabel.setText("Total : "+total);
    }
  }
}


class TMSummaryTableModel extends AbstractTableModel {

  String[] columnHeader = new String[]{"Op","#"};
  String[] op;

  Object[][] data;

  public TMSummaryTableModel(){
    op = MutationSystem.tm_operators;
    data = new Object[op.length][2];
    for(int i=0;i<op.length;i++){
      data[i][0] = op[i];
      data[i][1] = new Integer(0);
    }
  }

  public String getColumnName(int col){
    return columnHeader[col];
  }

  public int getColumnCount() {
    return columnHeader.length;
  }

  public Object getValueAt(int row, int col) {
    return data[row][col];
  }

  public int getRowCount() {
    return data.length;
  }

  public void setValueAt(Object value, int row, int col) {

    if (data[0][col] instanceof Integer && !(value instanceof Integer)) {
      try {
        data[row][col] = new Integer(value.toString());
        fireTableCellUpdated(row, col);
      } catch (NumberFormatException e) {
      }
    } else {
      data[row][col] = value;
      fireTableCellUpdated(row, col);
    }
  }

  public boolean isCellEditable(int row, int col) {
     return false;
  }
}
