package MYS.op;

import java.io.*;
import openjava.ptree.*;
import MYS.op.util.IOP_Helper;
import MYS.op.util.ScopeHandlingMutantCodeWriter;

//import java.util.Enumeration;
import openjava.mop.*;

public class IOR_Writer extends ScopeHandlingMutantCodeWriter
{
    MethodDeclaration mutant = null;
    OJClass[] par_types = null;
    //IOR clazz = null;

    public void setMutant(MethodDeclaration mutant,OJClass[] par_types){
      this.mutant = mutant;
      this.par_types = par_types;
      //this.clazz = clazz;
    }

    public IOR_Writer( Environment base_env,String file_name, PrintWriter out ) {
	  super(base_env,file_name,out);
    }

    boolean isMutantCall(MethodCall p){
      Expression arg_val;
      OJClass type=null;
      String binded_type;

      if( !(p.getName().equals(mutant.getName())) ) return false;

      try{
        Expression lexp = p.getReferenceExpr();
        if(lexp!=null){
          binded_type = getType(lexp).getName();
          if(!binded_type.equals(class_name)) return false;
        }


/*
      if( lexp instanceof Variable){
	binded_type = (clazz.bindedType(lexp.toString())).getName();
	if(!binded_type.equals(class_name)) return false;
      }

      if( lexp instanceof FieldAccess){
	try{
	  binded_type = (((FieldAccess)lexp).getType(clazz.getEnvironment())).toString();
	  if(!binded_type.equals(class_name)) return false;
	}catch(Exception e){
	  return false;
	}
      }

      if(lexp!=null && lexp instanceof SelfAccess
	&& ((SelfAccess)lexp).getAccessType()==SelfAccess.SUPER )
	  return false;
*/
      // Compare Arguments...
        ExpressionList args = p.getArguments();
        if(args.size()!=par_types.length) return false;
        for(int i=0; i<args.size() ; i++) {
          arg_val = args.get(i);

          type = getType(arg_val);

        /*if(arg_val instanceof Variable){
          String name = arg_val.toString();
          type = clazz.bindedType(name);
        }else if(arg_val instanceof BinaryExpression || arg_val instanceof Leaf){
          try{
            type = arg_val.getType(clazz.file_env);
          }catch(Exception e){
          }
        }else{
          type = null;
        }*/
          if(!type.equals(par_types[i])) return false;
        }
      }catch(Exception e){
        System.err.println("IOR: " + e);
        return false;
      }
        return true;
    }


    public void visit( MethodCall p ) throws ParseTreeException
    {
	if(!isMutantCall(p)){
	  super.visit(p);
	} else{
	  Expression expr = p.getReferenceExpr();
	  TypeName reftype = p.getReferenceType();

	  if (expr != null) {

	      if (expr instanceof Leaf
		  || expr instanceof ArrayAccess
		  || expr instanceof FieldAccess
		  || expr instanceof MethodCall
		  || expr instanceof Variable) {
		  expr.accept( this );
	      } else {
		  writeParenthesis( expr );
	      }
	      out.print( "." );
	  } else if (reftype != null) {

	      reftype.accept( this );
	      out.print( "." );
	  }

	  String name = p.getName()+"_";
	  out.print( name );

	  ExpressionList args = p.getArguments();
	  writeArguments( args );
	}
    }

    public void visit( MethodDeclaration p )
	throws ParseTreeException
    {
      if(!p.eq(mutant)){
	super.visit(p);
      }else{              // Change name by appending "_"
	// -----------------------------------------------------
	mutated_line = line_num;
	String temp= mutant.getModifiers().toString() + " "
		    + mutant.getReturnType().getName()+ " "
		    + mutant.getName() +"("
		    + mutant.getParameters().toString()+")";
	writeLog(removeNewline(temp)+" is renamed to " + mutant.getName()+ "_ ");
	// ----------------------------------------------------

        printComment( p );

        writeTab();

        /*ModifierList*/
        ModifierList modifs = p.getModifiers();
        if (modifs != null) {
            modifs.accept( this );
            if (! modifs.isEmptyAsRegular())  out.print( " " );
        }

        TypeName ts = p.getReturnType();
        ts.accept( this );

        out.print( " " );

        String name = p.getName()+"_";
        out.print( name );

        ParameterList params = p.getParameters();
        out.print( "(" );
        if (! params.isEmpty()) {
	    out.print( " " );  params.accept( this );  out.print( " " );
        } else {
	    params.accept( this );
        }
        out.print( ")" );

        TypeName[] tnl = p.getThrows();
        if (tnl.length != 0) {
	    out.println(); line_num++;
	    writeTab();  writeTab();
            out.print( "throws " );
            tnl[0].accept( this );
            for (int i = 1; i < tnl.length; ++i) {
                out.print ( ", " );
                tnl[i].accept( this );
            }
        }

        StatementList bl = p.getBody();
        if (bl == null) {
	    out.print( ";" );
        } else {
	    out.println(); line_num++; writeTab();
	    out.print( "{" );
	    if (bl.isEmpty()) {
		bl.accept( this );
	    } else {
		out.println(); line_num++;
		pushNest();  bl.accept( this );  popNest();
		writeTab();
	    }
	    out.print( "}" );
        }
        out.println(); line_num++;

      }
    }
}