////////////////////////////////////////////////////////////////////////////
// Module : IHI.java
// Author : Ma, Yu-Seung
// COPYRIGHT 2005 by Yu-Seung Ma, ALL RIGHTS RESERVED.
////////////////////////////////////////////////////////////////////////////

package mujava.op;

import java.io.*;
import openjava.mop.*;
import openjava.ptree.*;
import mujava.op.util.DeclAnalyzer;
import mujava.MutationSystem;


/**
 * <p>Description: </p>
 * <p>Copyright: Copyright (c) 2005 by Yu-Seung Ma, ALL RIGHTS RESERVED </p>
 * @author Yu-Seung Ma
 * @version 1.0
  */

public class IHI extends DeclAnalyzer
{
    Environment file_env = null;


    public void translateDefinition(CompilationUnit comp_unit) throws openjava.mop.MOPException
    {
        // only support one super class
        OJClass parent_class = getSuperclass();
        if((parent_class==null)||(parent_class.getName().equals("java.lang.Object"))) return;

        OJField[] fields = getDeclaredFields();
        OJField[] parent_fields = parent_class.getDeclaredFields();

         if( fields==null || parent_fields==null ) return;

         for(int i=0; i<parent_fields.length; ++i){
            if(parent_fields[i].getModifiers().isPrivate()) continue;
            if(parent_fields[i].getModifiers().isFinal()) continue;

            boolean exist_flag = false;
            for(int j=0;j<fields.length;++j){
                  if(equal(parent_fields[i],fields[j])){
                      exist_flag=true;
                      break;
                  }
            }
            if( (!exist_flag) && isApplicable(parent_fields[i],comp_unit)){
              try{
                  ModifierList modlist = new ModifierList();
                  OJModifier modif = parent_fields[i].getModifiers();
                  TypeName tname = TypeName.forOJClass( parent_fields[i].getType() );
                  modlist.add( modif.toModifier() );
                  String name = parent_fields[i].getName();
                  FieldDeclaration mutant = new FieldDeclaration( modlist, tname, name, null );
                  outputToFile(comp_unit,mutant);
              }catch(Exception ex){
                  System.err.println("[Exception]  "+ex);
              }
            }
         }
    }

    boolean isApplicable(OJField f, CompilationUnit comp_unit){
      if(f.getModifiers().isPublic()){
         return true;
      }else if(f.getModifiers().isPrivate()){
        return false;
      }else if(!isEquivalent(comp_unit,f)){
        return true;
      }
      return false;
    }


    private boolean isEquivalent(CompilationUnit comp_unit,OJField f){
        IHD_IHI_EqAnalyzer engine = new IHD_IHI_EqAnalyzer(file_env,comp_unit,f.getName());
        try{
            comp_unit.accept(engine);
        }catch(ParseTreeException e){
        }
        if(engine.isEquivalent()) return true;
        else return false;
    }

    public void outputToFile(CompilationUnit comp_unit,FieldDeclaration mutant){
      if (comp_unit==null) return;
      String f_name;
      num++;
      f_name = getSourceName(this);
      String mutant_dir = getMuantID();
      try {
        PrintWriter out = getPrintWriter(f_name);
        IHI_Writer writer = new IHI_Writer( mutant_dir, out );
        writer.setMutant(mutant);
        comp_unit.accept( writer );
        out.flush();  out.close();
      } catch ( IOException e ) {
        System.err.println( "fails to create " + f_name );
      } catch ( ParseTreeException e ) {
        System.err.println( "errors during printing " + f_name );
        e.printStackTrace();
      }
   }


    public IHI( openjava.mop.Environment oj_param0, openjava.mop.OJClass oj_param1, openjava.ptree.ClassDeclaration oj_param2 )
    {
        super( oj_param0, oj_param1, oj_param2 );
        file_env = oj_param0;
    }

    public IHI( java.lang.Class oj_param0, openjava.mop.MetaInfo oj_param1 )
    {
        super( oj_param0, oj_param1 );
    }
}

