package MYS.op;

import java.io.*;
import java.util.Enumeration;
import openjava.ptree.*;
import openjava.mop.Environment;
import MYS.op.util.MutantCodeWriter;

public class OAN_Writer extends MutantCodeWriter
{

    MethodCall original = null;
    String mutant = null;

    public void setMutant(MethodCall original,String mutant){
      this.original = original;
      this.mutant = mutant;
    }

    public OAN_Writer( String file_name,PrintWriter out ) {
	super(file_name, out);
    }

    public void visit( MethodCall p )
	throws ParseTreeException
    {
      if(p.eq(original)){
	//------------------------------------------------------
	mutated_line = line_num;
	writeLog(removeNewline(p.toString()+" => " +mutant));
	//---------------------------------------------------
	out.print(mutant);
      } else {
        Expression expr = p.getReferenceExpr();
        TypeName reftype = p.getReferenceType();

        if (expr != null) {
	  //ysma("MethodCall",expr);

            if (expr instanceof Leaf
                || expr instanceof ArrayAccess
                || expr instanceof FieldAccess
                || expr instanceof MethodCall
                || expr instanceof Variable) {
                expr.accept( this );
            } else {
		writeParenthesis( expr );
            }
            out.print( "." );
        } else if (reftype != null) {

	    reftype.accept( this );
	    out.print( "." );
	}

        String name = p.getName();
        out.print( name );

        ExpressionList args = p.getArguments();
	writeArguments( args );
      }
    }
}
