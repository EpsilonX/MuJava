package MYS.op;

import java.io.*;
import java.util.Enumeration;
import openjava.ptree.*;
import openjava.mop.Environment;
import MYS.op.util.MutantCodeWriter;

public class ISK_JTD_Writer extends MutantCodeWriter
{

    FieldAccess mutant_field = null;
    FieldAccess original_field = null;


    public void setMutant(FieldAccess original,FieldAccess mutant){
      this.original_field = original;
      this.mutant_field = mutant;
    }

    MethodCall mutant_method = null;
    MethodCall original_method = null;


    public void setMutant(MethodCall original,MethodCall mutant){
      this.original_method = original;
      this.mutant_method = mutant;
    }

	 public ISK_JTD_Writer( String file_name, PrintWriter out ) {
		super(file_name,out);
    }

    public void visit( FieldAccess p )
	throws ParseTreeException
    {
      if(!p.eq(original_field)){
		  super.visit(p);
      }else{
			// -----------------------------------------------------------
			mutated_line = line_num;
			String log_str = original_field.toString()+ " => " + mutant_field.toString();
			writeLog(removeNewline(log_str));
			// -------------------------------------------------------------
			visit(mutant_field);
      }
    }

    public void visit( MethodCall p )
	throws ParseTreeException
    {
      if(!p.eq(original_method)){
		  super.visit(p);
      }else{
			// --------------------------------------------------------------
			mutated_line = line_num;
			String log_str = original_method.toString()+ " => " + mutant_method.toString();
			writeLog(removeNewline(log_str));
			// --------------------------------------------------------------
			visit(mutant_method);
      }
    }
}

