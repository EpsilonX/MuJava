package MYS.op;

import java.io.*;
import java.util.Enumeration;
import openjava.ptree.*;
import openjava.mop.Environment;
import MYS.op.util.MutantCodeWriter;

public class PNC_Writer extends MutantCodeWriter
{

    AllocationExpression original = null;
    AllocationExpression mutant = null;

    public void setMutant(AllocationExpression original,AllocationExpression mutant){
      this.original = original;
      this.mutant = mutant;
    }

    public PNC_Writer( String file_name, PrintWriter out ) {
	   super(file_name,out);
    }

    public void visit( AllocationExpression p )
	throws ParseTreeException
    {
      if(p.eq(original)){
	// -------------------------------------------------------------
	mutated_line = line_num;
	visit(mutant);
	writeLog(removeNewline(original.toString()+" => "+mutant.toString()));
	// -------------------------------------------------------------
      }else{
        Expression encloser = p.getEncloser();
        if (encloser != null) {
            encloser.accept( this );
            out.print( " . " );
        }

        out.print( "new " );

        TypeName tn = p.getClassType();
        tn.accept( this );

        ExpressionList args = p.getArguments();
	writeArguments( args );

        MemberDeclarationList mdlst = p.getClassBody();
        if (mdlst != null) {
            out.println( "{" );
            pushNest();  mdlst.accept( this );  popNest();
            writeTab();  out.print( "}" );
        }
      }
    }

}
