package MYS.op;

import java.io.*;
import java.util.Enumeration;
import openjava.ptree.*;
import openjava.mop.Environment;
import MYS.op.util.MutantCodeWriter;

public class EOA_Writer extends MutantCodeWriter
{

    AssignmentExpression original = null;
    String mutant = null;

	 ExpressionStatement original_stmt = null;

    public void setMutant(AssignmentExpression original,String mutant){
      this.mutant = mutant;
      this.original = original;
    }

    public void setMutant(ExpressionStatement original,String mutant){
      this.mutant = mutant;
      this.original_stmt = original;
    }

    public EOA_Writer( String file_name, PrintWriter out ) {
	   super(file_name,out);
    }

	 public void visit( ExpressionStatement p )
	 throws ParseTreeException
    {
      if(p.eq(original_stmt)){
		 // -------------------------------------------------------------
		  writeTab(); out.println("try{");
		  line_num++;
		  mutated_line = line_num;
		  pushNest();
		  writeTab(); out.println(mutant+";");
		  popNest();
		  writeLog(removeNewline(original_stmt.toString()+" => "+mutant));
		  writeTab(); out.println("}catch(CloneNotSupportedException cnse){");
		  line_num++;
		  pushNest();
		  writeTab(); out.println("System.err.println(cnse);");
		  popNest();
		  line_num++;
		  writeTab(); out.println("}");
		  line_num++;
		 // -------------------------------------------------------------
      }else{
		  super.visit(p);
      }
    }


	 public void visit( AssignmentExpression p )
	 throws ParseTreeException
    {
      if(p.eq(original)){
		  // -------------------------------------------------------------
		  mutated_line = line_num;
		  out.print(mutant);
		  writeLog(removeNewline(original.toString()+" => "+mutant));
		  // -------------------------------------------------------------
      }else{
		  super.visit(p);
      }
    }

}
